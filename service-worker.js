const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/app/immutable/entry/app.CT2TZfBH.js",s+"/app/immutable/nodes/0.B4Y0IM3H.js",s+"/app/immutable/assets/0.DjSbXEpb.css",s+"/app/immutable/nodes/1.BO7plsNh.js",s+"/app/immutable/nodes/2.DEHlOf2W.js",s+"/app/immutable/assets/2._2RNktGG.css",s+"/app/immutable/nodes/3.DR3b4JOl.js",s+"/app/immutable/assets/3.BpwHfDRr.css",s+"/app/immutable/nodes/4.DAXs9icP.js",s+"/app/immutable/assets/4.oMRBRjrf.css",s+"/app/immutable/assets/Button.CZuWT0h-.css",s+"/app/immutable/chunks/Button.DIKM1YzD.js",s+"/app/immutable/assets/Icon.5_9I9Kmg.css",s+"/app/immutable/chunks/Icon.UGBRkimE.js",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.DDZvNAND.js",s+"/app/immutable/chunks/app.svelte.BaTxSmFg.js",s+"/app/immutable/chunks/directories.svelte.BIe4aDEB.js",s+"/app/immutable/chunks/disclose-version.BWbW40b5.js",s+"/app/immutable/chunks/entry.Be85JUoE.js",s+"/app/immutable/chunks/events.D_mhI6Gd.js",s+"/app/immutable/chunks/if.Bs95Mp5N.js",s+"/app/immutable/chunks/index-client.B7InVm37.js",s+"/app/immutable/chunks/input.CBHrDNcF.js",s+"/app/immutable/chunks/paths.B6ao0nb8.js",s+"/app/immutable/chunks/render.BY1bb_zd.js",s+"/app/immutable/chunks/runtime.BgeDY1Ez.js",s+"/app/immutable/chunks/svelte-head.C1gSeiIW.js",s+"/app/immutable/chunks/this.4zZ2LT6D.js",s+"/app/immutable/entry/start.CDdTA9uS.js"],l=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/back.svg",s+"/images/icons/double-checkmark.svg",s+"/images/icons/folder.svg",s+"/images/icons/gear.svg",s+"/images/icons/home.svg",s+"/images/icons/logout.svg",s+"/images/icons/plus.svg",s+"/images/icons/triangle-left.svg",s+"/images/icons/triangle-right.svg",s+"/images/icons/xmark-small.svg",s+"/manifest.json"],u="1726596631172",c=`cache-${u}`,p=[...o,...l];self.addEventListener("install",e=>{async function i(){await(await caches.open(c)).addAll(p)}e.waitUntil(i())});self.addEventListener("activate",e=>{async function i(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(i())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function i(){const t=new URL(e.request.url),n=await caches.open(c);if(p.includes(t.pathname)){const a=await n.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&n.put(e.request,a.clone()),a}catch(a){const m=await n.match(e.request);if(m)return m;throw a}}e.respondWith(i())});
