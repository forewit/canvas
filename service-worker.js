const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.DtM5J8fi.js",s+"/app/immutable/nodes/0.C0_-5Dr_.js",s+"/app/immutable/assets/0.DjSbXEpb.css",s+"/app/immutable/nodes/1.Ccv1LhVn.js",s+"/app/immutable/nodes/2.L2nCwtlK.js",s+"/app/immutable/nodes/3.5gYL_ZGV.js",s+"/app/immutable/assets/3.bWhRQjf2.css",s+"/app/immutable/nodes/4.Bhz3Jm5-.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.jtnHOM1j.js",s+"/app/immutable/assets/5.CmlrxW5X.css",s+"/app/immutable/nodes/6.dbfBzcQ0.js",s+"/app/immutable/nodes/7.B5kXmLdM.js",s+"/app/immutable/assets/7.B46YmKAW.css",s+"/app/immutable/assets/Button.CZuWT0h-.css",s+"/app/immutable/chunks/Button.DkeNhhnt.js",s+"/app/immutable/assets/Icon.5_9I9Kmg.css",s+"/app/immutable/chunks/Icon.DnVIo-WY.js",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.DA00XEqA.js",s+"/app/immutable/assets/TextInput.DlC6QW7z.css",s+"/app/immutable/chunks/TextInput.Cj2xuj1_.js",s+"/app/immutable/assets/Tree.MtONMW1_.css",s+"/app/immutable/chunks/Tree.BdJzxGah.js",s+"/app/immutable/chunks/app.svelte.DsTYy1J2.js",s+"/app/immutable/chunks/attributes.C-22cz5S.js",s+"/app/immutable/chunks/class.Bvena8yX.js",s+"/app/immutable/chunks/directories.svelte.ZKeNEwKh.js",s+"/app/immutable/chunks/disclose-version.6vPDxpwZ.js",s+"/app/immutable/chunks/each.C5CniBgF.js",s+"/app/immutable/chunks/entry.DpKMW6rJ.js",s+"/app/immutable/chunks/events.DiWhd9B4.js",s+"/app/immutable/chunks/if.iF3oE4Wo.js",s+"/app/immutable/chunks/index-client.BkplqDcG.js",s+"/app/immutable/chunks/input.CoTtX601.js",s+"/app/immutable/chunks/pages.svelte.D6iAmqDa.js",s+"/app/immutable/chunks/paths.D6MHkWk4.js",s+"/app/immutable/chunks/render.Dk-K2w9T.js",s+"/app/immutable/chunks/runtime.DmHE6BeA.js",s+"/app/immutable/chunks/snippet.DfjGNe4g.js",s+"/app/immutable/chunks/svelte-head.kZHqo2Nt.js",s+"/app/immutable/chunks/themes.svelte.e9knPHAw.js",s+"/app/immutable/chunks/this._SSdfQ9w.js",s+"/app/immutable/entry/start.CL_xID4-.js"],u=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/back.svg",s+"/images/icons/double-checkmark.svg",s+"/images/icons/gear.svg",s+"/images/icons/home.svg",s+"/images/icons/logout.svg",s+"/images/icons/plus.svg",s+"/images/icons/triangle-left.svg",s+"/images/icons/triangle-right.svg",s+"/images/icons/xmark-small.svg",s+"/manifest.json"],o="1726513230667",p=`cache-${o}`,c=[...l,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(p)).addAll(c)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(p);if(c.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const m=await i.match(e.request);if(m)return m;throw a}}e.respondWith(n())});
