const t=location.pathname.split("/").slice(0,-1).join("/"),p=[t+"/app/immutable/entry/app.k87GVp8H.js",t+"/app/immutable/nodes/0.Byq2ISNb.js",t+"/app/immutable/nodes/1.DqpL1H51.js",t+"/app/immutable/nodes/2.CS2woezj.js",t+"/app/immutable/chunks/entry.CMxnTfdt.js",t+"/app/immutable/chunks/index.DJpbLVzb.js",t+"/app/immutable/chunks/scheduler.BvLojk_z.js",t+"/app/immutable/entry/start.Q1lk4GpU.js"],l=[t+"/images/favicon_512.png",t+"/manifest.json"],u="1722607145747",i=`cache-${u}`,r=[...p,...l];self.addEventListener("install",e=>{async function n(){await(await caches.open(i)).addAll(r)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const a of await caches.keys())a!==i&&await caches.delete(a)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const a=new URL(e.request.url),c=await caches.open(i);if(r.includes(a.pathname)){const s=await c.match(a.pathname);if(s)return s}try{const s=await fetch(e.request);if(!(s instanceof Response))throw new Error("invalid response from fetch");return s.status===200&&c.put(e.request,s.clone()),s}catch(s){const o=await c.match(e.request);if(o)return o;throw s}}e.respondWith(n())});
