const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/app/immutable/entry/app.BkDBXSTT.js",s+"/app/immutable/nodes/0.C6oZcwd5.js",s+"/app/immutable/assets/0.DTl7djwE.css",s+"/app/immutable/nodes/1.BGis3Zr2.js",s+"/app/immutable/nodes/2.1QZp7V9L.js",s+"/app/immutable/nodes/3.virQcBGS.js",s+"/app/immutable/assets/3.CJIY8EWf.css",s+"/app/immutable/nodes/4.COmPInzp.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.DLNc0Fsx.js",s+"/app/immutable/nodes/6.B4yHwW0h.js",s+"/app/immutable/assets/6.CjySxosa.css",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.B2Xnii6M.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/disclose-version.Y_F0_rko.js",s+"/app/immutable/chunks/entry.DXA8cmeo.js",s+"/app/immutable/chunks/events.CH0IXMTi.js",s+"/app/immutable/chunks/firebaseState.svelte.BRmEMasN.js",s+"/app/immutable/chunks/if.B_SVmx97.js",s+"/app/immutable/chunks/index-client.D2Fp2Kcj.js",s+"/app/immutable/chunks/pagesState.svelte.BbUgTMB7.js",s+"/app/immutable/chunks/preload-helper.BelJvYX6.js",s+"/app/immutable/chunks/proxy.Clc3I-nX.js",s+"/app/immutable/chunks/render.CpWSVxfm.js",s+"/app/immutable/chunks/runtime.atawwWdS.js",s+"/app/immutable/chunks/snippet.C1fCetAO.js",s+"/app/immutable/chunks/svelte-head.SZIjQyGK.js",s+"/app/immutable/chunks/userState.svelte.DT03alZW.js",s+"/app/immutable/entry/start.BP-cWxVZ.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],o=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/manifest.json"],u="1723715759467",c=`cache-${u}`,l=[...m,...o];self.addEventListener("install",e=>{async function n(){await(await caches.open(c)).addAll(l)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(c);if(l.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const p=await i.match(e.request);if(p)return p;throw a}}e.respondWith(n())});
