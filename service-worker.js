const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.ChEPL85V.js",s+"/app/immutable/nodes/0.D-IKpWtY.js",s+"/app/immutable/assets/0.BHbsLKE0.css",s+"/app/immutable/nodes/1.D2tP2PaV.js",s+"/app/immutable/nodes/2.B3Lhmmz6.js",s+"/app/immutable/nodes/3.BAIE1FYS.js",s+"/app/immutable/assets/3.ZfI8qqtn.css",s+"/app/immutable/nodes/4.D4Ax5oR1.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.CUo_tKsW.js",s+"/app/immutable/nodes/6.DzMN9Wce.js",s+"/app/immutable/assets/6.BbB9kVr0.css",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.leCoMLpz.js",s+"/app/immutable/chunks/app.svelte.Bs1Ymz2A.js",s+"/app/immutable/chunks/attributes.Dwwz4tQW.js",s+"/app/immutable/chunks/authUtils.z_lGj5-3.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/disclose-version.CpwCgqSZ.js",s+"/app/immutable/chunks/entry.DhtXf55u.js",s+"/app/immutable/chunks/events.CyuGU5Uw.js",s+"/app/immutable/chunks/firebase.svelte.Bp0FuD6c.js",s+"/app/immutable/chunks/if.fxwIRUMZ.js",s+"/app/immutable/chunks/input.DM-jeKjV.js",s+"/app/immutable/chunks/pagesState.svelte.hY4uYK8S.js",s+"/app/immutable/chunks/preload-helper.DwmgP8gT.js",s+"/app/immutable/chunks/proxy.DWE3J2IR.js",s+"/app/immutable/chunks/render.x2q_J-LW.js",s+"/app/immutable/chunks/runtime.zjbhdcTH.js",s+"/app/immutable/chunks/snippet.DlXq3IXs.js",s+"/app/immutable/chunks/svelte-head.BShndUdT.js",s+"/app/immutable/chunks/userState.svelte.DV4QwUgh.js",s+"/app/immutable/entry/start.CSp0K68F.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],u=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/double-checkmark.svg",s+"/manifest.json"],o="1724443988622",p=`cache-${o}`,m=[...l,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(p)).addAll(m)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(p);if(m.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const c=await i.match(e.request);if(c)return c;throw a}}e.respondWith(n())});
