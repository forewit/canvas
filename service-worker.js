const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/app/immutable/entry/app.BF9zY6Ix.js",s+"/app/immutable/nodes/0.C-2M67Es.js",s+"/app/immutable/assets/0.BHbsLKE0.css",s+"/app/immutable/nodes/1.9pG9O9l7.js",s+"/app/immutable/nodes/2.DNJHoZt8.js",s+"/app/immutable/nodes/3.CwK8-nmh.js",s+"/app/immutable/assets/3.ZfI8qqtn.css",s+"/app/immutable/nodes/4.BV_u6YjN.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.CDMQI1IL.js",s+"/app/immutable/nodes/6.Bz0_SoGA.js",s+"/app/immutable/assets/6.BbB9kVr0.css",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.C_0y9dmJ.js",s+"/app/immutable/chunks/appState.svelte.7EbcOfI7.js",s+"/app/immutable/chunks/attributes.BIGlJQtS.js",s+"/app/immutable/chunks/authUtils.Bop8eAqs.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/disclose-version.D25B7Gj1.js",s+"/app/immutable/chunks/entry.CicxHbBM.js",s+"/app/immutable/chunks/events.DMcSJaRG.js",s+"/app/immutable/chunks/firebase.client.CFiaGCcJ.js",s+"/app/immutable/chunks/firebaseState.svelte.lXjoxBB0.js",s+"/app/immutable/chunks/if.DXSm7w67.js",s+"/app/immutable/chunks/index-client.y0jMOApN.js",s+"/app/immutable/chunks/input.WhFY7VDn.js",s+"/app/immutable/chunks/pagesState.svelte.l_q5DSsV.js",s+"/app/immutable/chunks/preload-helper.BSMzPJI5.js",s+"/app/immutable/chunks/proxy.BSfg9Vi9.js",s+"/app/immutable/chunks/render.DY8h8vBE.js",s+"/app/immutable/chunks/runtime.DQzYxgOy.js",s+"/app/immutable/chunks/snippet.Debgv58V.js",s+"/app/immutable/chunks/svelte-head.BhM6oEBb.js",s+"/app/immutable/entry/start.hraSHY4-.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],u=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/double-checkmark.svg",s+"/manifest.json"],o="1723840253889",p=`cache-${o}`,l=[...m,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(p)).addAll(l)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(p);if(l.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const c=await i.match(e.request);if(c)return c;throw a}}e.respondWith(n())});
