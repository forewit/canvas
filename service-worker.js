const e=location.pathname.split("/").slice(0,-1).join("/"),l=[e+"/app/immutable/entry/app.pjul0QLM.js",e+"/app/immutable/nodes/0.xefgF6mG.js",e+"/app/immutable/nodes/1.wk61ez1m.js",e+"/app/immutable/nodes/2.BAaPLx9f.js",e+"/app/immutable/nodes/3.BAaPLx9f.js",e+"/app/immutable/nodes/4.BAaPLx9f.js",e+"/app/immutable/chunks/entry.B7PMn7HD.js",e+"/app/immutable/chunks/index.Y7cfURbq.js",e+"/app/immutable/chunks/scheduler.BvLojk_z.js",e+"/app/immutable/entry/start.CRxovQ04.js"],p=[e+"/images/favicon_512.png",e+"/manifest.json",e+"/styles/global.css",e+"/styles/normalize.css",e+"/styles/reset.css"],u="1722612143544",i=`cache-${u}`,r=[...l,...p];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(r)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const t=new URL(s.request.url),c=await caches.open(i);if(r.includes(t.pathname)){const a=await c.match(t.pathname);if(a)return a}try{const a=await fetch(s.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&c.put(s.request,a.clone()),a}catch(a){const o=await c.match(s.request);if(o)return o;throw a}}s.respondWith(n())});
