const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.D8P1QDpA.js",s+"/app/immutable/nodes/0.DIQ3I3UO.js",s+"/app/immutable/assets/0.BHbsLKE0.css",s+"/app/immutable/nodes/1.CGIbg3l-.js",s+"/app/immutable/nodes/2.DMT93T4c.js",s+"/app/immutable/nodes/3.B39mjn0u.js",s+"/app/immutable/assets/3.BozvWS-W.css",s+"/app/immutable/nodes/4.rUNYKOiD.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.wd3qpB8i.js",s+"/app/immutable/assets/5.dBH5I6Dj.css",s+"/app/immutable/nodes/6.BAJjnf3t.js",s+"/app/immutable/assets/6.D5z5_7cG.css",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.DW1HY5my.js",s+"/app/immutable/chunks/app.svelte.D9WIUQa3.js",s+"/app/immutable/chunks/attributes.DpmCKYLT.js",s+"/app/immutable/chunks/directories.svelte.BcVxy1W3.js",s+"/app/immutable/chunks/disclose-version.Bss9YEfS.js",s+"/app/immutable/chunks/entry.B-dZpxj4.js",s+"/app/immutable/chunks/events.Bq-SRSW-.js",s+"/app/immutable/chunks/firebase.svelte.D2298B1x.js",s+"/app/immutable/chunks/if.B6n-4H67.js",s+"/app/immutable/chunks/index-client.DN7g3vFD.js",s+"/app/immutable/chunks/input.sp18iOmy.js",s+"/app/immutable/chunks/pages.svelte.CtO-pPPJ.js",s+"/app/immutable/chunks/proxy.pcUAtjrM.js",s+"/app/immutable/chunks/render.5z5Mi2YI.js",s+"/app/immutable/chunks/runtime.DmOoDO8L.js",s+"/app/immutable/chunks/snippet.C-4xuLl4.js",s+"/app/immutable/chunks/svelte-head.CVzkxkJY.js",s+"/app/immutable/entry/start.DnRc9VCb.js"],u=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/double-checkmark.svg",s+"/manifest.json"],o="1724964302057",p=`cache-${o}`,m=[...l,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(p)).addAll(m)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(p);if(m.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const c=await i.match(e.request);if(c)return c;throw a}}e.respondWith(n())});
