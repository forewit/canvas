const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/app/immutable/entry/app.o4KRn0kl.js",s+"/app/immutable/nodes/0.Bl11aIaG.js",s+"/app/immutable/assets/0.BHbsLKE0.css",s+"/app/immutable/nodes/1.g6_rl2AD.js",s+"/app/immutable/nodes/2.B8onqv-T.js",s+"/app/immutable/nodes/3.DgH2ctXw.js",s+"/app/immutable/assets/3.ZfI8qqtn.css",s+"/app/immutable/nodes/4.BFjUgVeE.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.CBDStvWs.js",s+"/app/immutable/nodes/6.BuY18Az4.js",s+"/app/immutable/assets/6.BbB9kVr0.css",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.C5q6aw-Y.js",s+"/app/immutable/chunks/attributes.CKa9Kjde.js",s+"/app/immutable/chunks/authUtils.DLvMaj9w.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/disclose-version.C3Ap_Fdw.js",s+"/app/immutable/chunks/entry.Bpl0Gw6I.js",s+"/app/immutable/chunks/events.B6Flj5Su.js",s+"/app/immutable/chunks/firebase.svelte.B5El6fZa.js",s+"/app/immutable/chunks/if.C0GAPCmN.js",s+"/app/immutable/chunks/index-client.DnQhM6gD.js",s+"/app/immutable/chunks/input.ChQbtpl-.js",s+"/app/immutable/chunks/pages.svelte.B2tb6MQV.js",s+"/app/immutable/chunks/pagesState.svelte.Dqb3nbwb.js",s+"/app/immutable/chunks/preload-helper.CICqh-rE.js",s+"/app/immutable/chunks/proxy.V3ps-ERZ.js",s+"/app/immutable/chunks/render.DcDgj3Hd.js",s+"/app/immutable/chunks/runtime.CrOvq7Gc.js",s+"/app/immutable/chunks/snippet.CLDTnoGf.js",s+"/app/immutable/chunks/svelte-head.CB_slkR5.js",s+"/app/immutable/chunks/userState.svelte.lnJRSS7l.js",s+"/app/immutable/entry/start.BnwAfPpG.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],u=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/double-checkmark.svg",s+"/manifest.json"],o="1724716371323",p=`cache-${o}`,l=[...m,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(p)).addAll(l)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(p);if(l.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const c=await i.match(e.request);if(c)return c;throw a}}e.respondWith(n())});
