const e=location.pathname.split("/").slice(0,-1).join("/"),r=[e+"/app/immutable/entry/app.CUGkps35.js",e+"/app/immutable/nodes/0.j6lfjf0c.js",e+"/app/immutable/nodes/1.CAGVp3YJ.js",e+"/app/immutable/nodes/2.DCuPzl4i.js",e+"/app/immutable/nodes/3.DCuPzl4i.js",e+"/app/immutable/nodes/4.DCuPzl4i.js",e+"/app/immutable/chunks/entry.BvlyqitI.js",e+"/app/immutable/chunks/index.BvPxgrZn.js",e+"/app/immutable/chunks/scheduler.CcJ_C8Wb.js",e+"/app/immutable/entry/start.Ts7l8wGb.js"],p=[e+"/images/favicon_512.png",e+"/manifest.json",e+"/styles/normalize.css",e+"/styles/reset.css"],u="1722976138837",i=`cache-${u}`,l=[...r,...p];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(l)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const a of await caches.keys())a!==i&&await caches.delete(a)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const a=new URL(s.request.url),c=await caches.open(i);if(l.includes(a.pathname)){const t=await c.match(a.pathname);if(t)return t}try{const t=await fetch(s.request);if(!(t instanceof Response))throw new Error("invalid response from fetch");return t.status===200&&c.put(s.request,t.clone()),t}catch(t){const o=await c.match(s.request);if(o)return o;throw t}}s.respondWith(n())});
