const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/app/immutable/entry/app.B9upG-Lj.js",s+"/app/immutable/nodes/0.tGTwGw21.js",s+"/app/immutable/assets/0.DTl7djwE.css",s+"/app/immutable/nodes/1.pTwXvZLZ.js",s+"/app/immutable/nodes/2.DV_aBzvA.js",s+"/app/immutable/nodes/3.BVTmsou4.js",s+"/app/immutable/assets/3.CJIY8EWf.css",s+"/app/immutable/nodes/4.BAHp2oAa.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.BlBZ9Ly_.js",s+"/app/immutable/nodes/6.C8IKcH-o.js",s+"/app/immutable/assets/6.CpCMUItx.css",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.BKc5Tr77.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/disclose-version.CoemXm11.js",s+"/app/immutable/chunks/entry.CoLAyGwF.js",s+"/app/immutable/chunks/events.MZf0TXMn.js",s+"/app/immutable/chunks/firebaseState.svelte.D3AjtAtJ.js",s+"/app/immutable/chunks/if.DGFvA3-a.js",s+"/app/immutable/chunks/index-client.Co0rPzlc.js",s+"/app/immutable/chunks/input.DpgGelva.js",s+"/app/immutable/chunks/pagesState.svelte.BJoJOXIC.js",s+"/app/immutable/chunks/paths.DYdJgxtv.js",s+"/app/immutable/chunks/preload-helper.BM52cFUW.js",s+"/app/immutable/chunks/proxy.DKiqHPpR.js",s+"/app/immutable/chunks/render.A7C0iPQ6.js",s+"/app/immutable/chunks/runtime.CWsWNGOL.js",s+"/app/immutable/chunks/snippet.CIXmjlpW.js",s+"/app/immutable/chunks/svelte-head.CSeeF66B.js",s+"/app/immutable/entry/start.UGjBK9IU.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],o=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/double-checkmark.svg",s+"/manifest.json"],u="1723718409975",p=`cache-${u}`,l=[...m,...o];self.addEventListener("install",e=>{async function n(){await(await caches.open(p)).addAll(l)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==p&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(p);if(l.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const c=await i.match(e.request);if(c)return c;throw a}}e.respondWith(n())});
