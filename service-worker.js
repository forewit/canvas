const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.CUbLDpSO.js",s+"/app/immutable/nodes/0.DCJ6E3zI.js",s+"/app/immutable/assets/0.DjSbXEpb.css",s+"/app/immutable/nodes/1.kbcodig5.js",s+"/app/immutable/nodes/2.DxYFUytE.js",s+"/app/immutable/nodes/3.Bb73M6fP.js",s+"/app/immutable/assets/3.bWhRQjf2.css",s+"/app/immutable/nodes/4.CndmDZjS.js",s+"/app/immutable/assets/4.BpwHfDRr.css",s+"/app/immutable/nodes/5.B9xZ0WT2.js",s+"/app/immutable/assets/5.CmlrxW5X.css",s+"/app/immutable/nodes/6.CPJBwhdh.js",s+"/app/immutable/nodes/7.CkmiHQ-x.js",s+"/app/immutable/assets/7.B46YmKAW.css",s+"/app/immutable/assets/Button.CZuWT0h-.css",s+"/app/immutable/chunks/Button.DztcUPFw.js",s+"/app/immutable/assets/Icon.5_9I9Kmg.css",s+"/app/immutable/chunks/Icon.D29ek3mO.js",s+"/app/immutable/assets/ProgressBar.CvJdmZFX.css",s+"/app/immutable/chunks/ProgressBar.CAxdhl-3.js",s+"/app/immutable/assets/TextInput.DlC6QW7z.css",s+"/app/immutable/chunks/TextInput.DuKdIm-o.js",s+"/app/immutable/assets/Tree.BNijOT9b.css",s+"/app/immutable/chunks/Tree.wxnvwQfm.js",s+"/app/immutable/chunks/app.svelte.CDQhUUHo.js",s+"/app/immutable/chunks/attributes.CprZQLxj.js",s+"/app/immutable/chunks/class.Bvena8yX.js",s+"/app/immutable/chunks/directories.svelte.ByRZuYgV.js",s+"/app/immutable/chunks/disclose-version.DUTDVF3e.js",s+"/app/immutable/chunks/each.IPTudutm.js",s+"/app/immutable/chunks/entry.Cd7kqOMv.js",s+"/app/immutable/chunks/events.DU2d_6da.js",s+"/app/immutable/chunks/if.iSSDrv-K.js",s+"/app/immutable/chunks/index-client.BZVV6kZL.js",s+"/app/immutable/chunks/input.C8ZTZ85j.js",s+"/app/immutable/chunks/pages.svelte.DTz5NOLm.js",s+"/app/immutable/chunks/paths.D5hCaknM.js",s+"/app/immutable/chunks/props.DXP7wcUJ.js",s+"/app/immutable/chunks/render.C02tbr-Y.js",s+"/app/immutable/chunks/runtime.A5g2blTK.js",s+"/app/immutable/chunks/snippet.Bf06k2lt.js",s+"/app/immutable/chunks/svelte-head.MzwTKTQV.js",s+"/app/immutable/chunks/this.ByQktMin.js",s+"/app/immutable/entry/start.DlQs5Rdo.js"],u=[s+"/fonts/cascadia-code/Cascadia.ttf",s+"/fonts/cascadia-code/SIL Open Font License.txt",s+"/fonts/selawik/selawk.ttf",s+"/fonts/selawik/selawkb.ttf",s+"/fonts/selawik/selawkl.ttf",s+"/fonts/selawik/selawksb.ttf",s+"/fonts/selawik/selawksl.ttf",s+"/fonts/selawik/SIL Open Font License.txt",s+"/images/favicon.svg",s+"/images/favicon_512.png",s+"/images/icons/back.svg",s+"/images/icons/double-checkmark.svg",s+"/images/icons/gear.svg",s+"/images/icons/home.svg",s+"/images/icons/logout.svg",s+"/images/icons/plus.svg",s+"/images/icons/triangle-left.svg",s+"/images/icons/triangle-right.svg",s+"/images/icons/xmark-small.svg",s+"/manifest.json"],o="1726260361148",m=`cache-${o}`,c=[...l,...u];self.addEventListener("install",a=>{async function i(){await(await caches.open(m)).addAll(c)}a.waitUntil(i())});self.addEventListener("activate",a=>{async function i(){for(const t of await caches.keys())t!==m&&await caches.delete(t)}a.waitUntil(i())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function i(){const t=new URL(a.request.url),n=await caches.open(m);if(c.includes(t.pathname)){const e=await n.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&n.put(a.request,e.clone()),e}catch(e){const p=await n.match(a.request);if(p)return p;throw e}}a.respondWith(i())});
